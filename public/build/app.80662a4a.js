angular.module("madisonApp.controllers",[]),angular.module("madisonApp.controllers").controller("AnnotationController",["$scope","$sce","$http","annotationService","createLoginPopup","growl","$location","$filter","$timeout",function($scope,$sce,$http,annotationService,createLoginPopup,growl,$location){$scope.annotations=[],$scope.supported=null,$scope.opposed=!1;var hash=$location.hash(),subCommentId=hash.match(/^annsubcomment_([0-9]+)$/);subCommentId&&($scope.subCommentId=subCommentId[1]),$scope.init=function(){$scope.user=user,$scope.doc=doc},$scope.$on("annotationsUpdated",function(){angular.forEach(annotationService.annotations,function(annotation){if($.inArray(annotation,$scope.annotations)<0){var collapsed=!0;$scope.subCommentId&&angular.forEach(annotation.comments,function(subcomment){subcomment.id==$scope.subCommentId&&(collapsed=!1)}),annotation.label="annotation",annotation.commentsCollapsed=collapsed,$scope.annotations.push(annotation)}}),$scope.$apply()}),$scope.isSponsor=function(){var currentId=$scope.user.id,sponsored=!1;return angular.forEach($scope.doc.sponsor,function(sponsor){currentId===sponsor.id&&(sponsored=!0)}),sponsored},$scope.notifyAuthor=function(annotation){$http.post("/api/docs/"+doc.id+"/annotations/"+annotation.id+"/seen").success(function(data){annotation.seen=data.seen}).error(function(data){console.error("Unable to mark activity as seen: %o",data)})},$scope.getDocComments=function(docId){$http({method:"GET",url:"/api/docs/"+docId+"/comments"}).success(function(data){angular.forEach(data,function(comment){var collapsed=!1;$scope.subCommentId&&angular.forEach(comment.comments,function(subcomment){subcomment.id==$scope.subCommentId&&(collapsed=!1)}),comment.commentsCollapsed=collapsed,comment.label="comment",comment.link="comment_"+comment.id,$scope.annotations.push(comment)})}).error(function(data){console.error("Error loading comments: %o",data)})},$scope.commentSubmit=function(){var comment=angular.copy($scope.comment);comment.user=$scope.user,comment.doc=$scope.doc,$http.post("/api/docs/"+comment.doc.id+"/comments",{comment:comment}).success(function(){comment.label="comment",comment.user.fname=comment.user.name,$scope.stream.push(comment),$scope.comment.text=""}).error(function(data){console.error("Error posting comment: %o",data)})},$scope.activityOrder=function(activity){var popularity=activity.likes-activity.dislikes;return popularity},$scope.addAction=function(activity,action,$event){""!==$scope.user.id?$http.post("/api/docs/"+$scope.doc.id+"/"+activity.label+"s/"+activity.id+"/"+action).success(function(data){activity.likes=data.likes,activity.dislikes=data.dislikes,activity.flags=data.flags}).error(function(data){console.error(data)}):createLoginPopup($event)},$scope.collapseComments=function(activity){activity.commentsCollapsed=!activity.commentsCollapsed},$scope.subcommentSubmit=function(activity,subcomment){subcomment.user=$scope.user,$.post("/api/docs/"+$scope.doc.id+"/"+activity.label+"s/"+activity.id+"/comments",{comment:subcomment}).success(function(data){activity.comments.push(data),subcomment.text="",subcomment.user="",$scope.$apply()}).error(function(data){console.error(data)})}}]),angular.module("madisonApp.controllers").controller("AppController",["$scope","ipCookie","UserService",function($scope,ipCookie,UserService){$scope.$on("userUpdated",function(){$scope.user=UserService.user}),UserService.getUser(),$scope.step_messages={step_0:"Welcome to Madison!  Help create better policy in your community.  Click Next to continue.",step_1:"Getting Started:  Choose a policy document.  You can browse, or filter by title, category, sponsor, or status. Go ahead, choose one!",step_2:"Next, dive in! Scroll or use the Table of Contents to get to the good stuff.",step_3:"Share ideas and questions with the document sponsor and other users in the Discussion tab.",step_4:"Suggest specific changes to the text.  Just highlight part of the document and add your thoughts!"},$scope.currentStep=ipCookie("myTour")||0,$scope.stepComplete=function(){ipCookie("myTour",$scope.currentStep,{path:"/",expires:3650})},$scope.tourComplete=function(){ipCookie("myTour",99,{path:"/",expires:3650})}}]),angular.module("madisonApp.controllers").controller("CommentController",["$scope","$sce","$http","annotationService","createLoginPopup","growl","$location","$filter","$timeout",function($scope,$sce,$http,annotationService,createLoginPopup,growl,$location){$scope.comments=[],$scope.supported=null,$scope.opposed=!1,$scope.collapsed_comment={};var hash=$location.hash(),subCommentId=hash.match(/(sub)?comment_([0-9]+)$/);subCommentId&&($scope.subCommentId=subCommentId[2]),$scope.init=function(docId){$scope.getDocComments(docId),$scope.user=user,$scope.doc=doc},$scope.isSponsor=function(){var currentId=$scope.user.id,sponsored=!1;return angular.forEach($scope.doc.sponsor,function(sponsor){currentId===sponsor.id&&(sponsored=!0)}),sponsored},$scope.notifyAuthor=function(activity){$http.post("/api/docs/"+doc.id+"/comments/"+activity.id+"/seen").success(function(data){activity.seen=data.seen}).error(function(data){console.error("Unable to mark activity as seen: %o",data)})},$scope.getDocComments=function(docId){$http({method:"GET",url:"/api/docs/"+docId+"/comments"}).success(function(data){if(angular.forEach(data,function(comment){if(null!==comment.parent_id){var parent=$scope.parentSearch(data,comment.parent_id);comment.parentpointer=data[parent],data[parent].comments.push(comment)}comment.id==$scope.subCommentId&&($scope.collapsed_comment=comment),comment.commentsCollapsed=!0,comment.label="comment",comment.link="comment_"+comment.id,null===comment.parent_id&&$scope.comments.push(comment)}),$scope.subCommentId){var not_parent=!0;do $scope.collapsed_comment.commentsCollapsed=!1,null!==$scope.collapsed_comment.parent_id?$scope.collapsed_comment=$scope.collapsed_comment.parentpointer:not_parent=!1;while(not_parent===!0)}}).error(function(data){console.error("Error loading comments: %o",data)})},$scope.parentSearch=function(arr,val){for(var i=0;i<arr.length;i++)if(arr[i].id===val)return i;return!1},$scope.commentSubmit=function(){var comment=angular.copy($scope.comment);comment.user=$scope.user,comment.doc=$scope.doc,$http.post("/api/docs/"+comment.doc.id+"/comments",{comment:comment}).success(function(data){data[0].label="comment",$scope.comments.push(data[0]),$scope.comment.text=""}).error(function(data){console.error("Error posting comment: %o",data)})},$scope.activityOrder=function(activity){var popularity=activity.likes-activity.dislikes;return popularity},$scope.addAction=function(activity,action,$event){""!==$scope.user.id?$http.post("/api/docs/"+$scope.doc.id+"/"+activity.label+"s/"+activity.id+"/"+action).success(function(data){activity.likes=data.likes,activity.dislikes=data.dislikes,activity.flags=data.flags}).error(function(data){console.error(data)}):createLoginPopup($event)},$scope.collapseComments=function(activity){activity.commentsCollapsed=!activity.commentsCollapsed},$scope.subcommentSubmit=function(activity,subcomment){subcomment.user=$scope.user,$.post("/api/docs/"+$scope.doc.id+"/"+activity.label+"s/"+activity.id+"/comments",{comment:subcomment}).success(function(data){data.comments=[],data.label="comment",activity.comments.push(data),subcomment.text="",subcomment.user="",$scope.$apply()}).error(function(data){console.error(data)})}}]),angular.module("madisonApp.controllers").controller("DashboardDocumentsController",["$scope","$http","$filter",function($scope,$http,$filter){$scope.docs=[],$scope.categories=[],$scope.sponsors=[],$scope.statuses=[],$scope.dates=[],$scope.dateSort="",$scope.select2="",$scope.docSort="created_at",$scope.reverse=!0,$scope.select2Config={multiple:!0,allowClear:!0,placeholder:"Filter documents by category, sponsor, or status"},$scope.dateSortConfig={allowClear:!0,placeholder:"Sort By Date"},$http.get("/api/docs").success(function(data){$scope.parseDocs(data)}).error(function(data){console.error("Unable to get documents: %o",data)}),$scope.parseDocs=function(docs){angular.forEach(docs,function(doc){$scope.docs.push(doc),$scope.parseDocMeta(doc.categories,"categories"),$scope.parseDocMeta(doc.sponsor,"sponsors"),$scope.parseDocMeta(doc.statuses,"statuses"),angular.forEach(doc.dates,function(date){date.date=Date.parse(date.date)})})},$scope.parseDocMeta=function(collection,name){void 0!==collection&&0!==collection.length&&angular.forEach(collection,function(item){var found=$filter("getById")($scope[name],item.id);if(null===found)switch(name){case"categories":$scope.categories.push(item);break;case"sponsors":$scope.sponsors.push(item);break;case"statuses":$scope.statuses.push(item);break;default:console.error("Unknown meta name: "+name)}})},$scope.docFilter=function(doc){var show=!1;if(void 0!==$scope.select2&&""!==$scope.select2){var cont=!0,select2=$scope.select2.split("_"),type=select2[0],value=parseInt(select2[1],10);switch(type){case"category":angular.forEach(doc.categories,function(category){+category.id===value&&cont&&(show=!0,cont=!1)});break;case"sponsor":angular.forEach(doc.sponsor,function(sponsor){+sponsor.id===value&&cont&&(show=!0,cont=!1)});break;case"status":angular.forEach(doc.statuses,function(status){+status.id===value&&cont&&(show=!0,cont=!1)})}}else show=!0;return show}}]),angular.module("madisonApp.controllers").controller("DashboardEditorController",["$scope","$http","$timeout","$location","$filter","growl",function($scope,$http,$timeout,$location,$filter,growl){$scope.doc={},$scope.sponsor={},$scope.status={},$scope.newdate={label:"",date:new Date},$scope.verifiedUsers=[],$scope.categories=[],$scope.introtext="",$scope.suggestedCategories=[],$scope.suggestedStatuses=[],$scope.dates=[],$scope.init=function(){function clean_slug(string){return string.toLowerCase().replace(/[^a-zA-Z0-9\- ]/g,"").replace(/ +/g,"-")}var abs=$location.absUrl(),id=abs.match(/.*\/(\d+)$/)[1],docDone=$scope.getDoc(id);$scope.getAllCategories(),$scope.getVerifiedUsers(),$scope.setSelectOptions();var initCategories=!0,initSponsor=!0,initStatus=!0,initTitle=!0,initSlug=!0,initContent=!0;docDone.then(function(){new Markdown.Editor(Markdown.getSanitizingConverter()).run(),$("#wmd-preview").css("overflow","scroll"),$("#wmd-preview").css("height",$("#wmd-input").height()+22),$("#wmd-input").scroll(function(){$("#wmd-preview").scrollTop($("#wmd-input").scrollTop())});var introTextTimeout=null;$scope.updateIntroText=function(newValue){introTextTimeout&&$timeout.cancel(introTextTimeout),introTextTimeout=$timeout(function(){$scope.saveIntroText(newValue)},3e3)},$scope.getDocSponsor().then(function(){$scope.$watch("sponsor",function(){initSponsor?$timeout(function(){initSponsor=!1}):$scope.saveSponsor()})}),$scope.getDocStatus().then(function(){$scope.$watch("status",function(){initStatus?$timeout(function(){initStatus=!1}):$scope.saveStatus()})}),$scope.getDocCategories().then(function(){$scope.$watch("categories",function(){initCategories?$timeout(function(){initCategories=!1}):$scope.saveCategories()})}),$scope.getIntroText(),$scope.getDocDates(),$scope.$watch("doc.title",function(){initTitle?$timeout(function(){initTitle=!1}):$scope.saveTitle()}),$scope.$watch("doc.slug",function(){if(initSlug)$timeout(function(){initSlug=!1});else{var safe_slug=$scope.doc.slug,sanitized_slug=clean_slug(safe_slug);safe_slug==sanitized_slug?$scope.saveSlug():(console.log("Invalid slug, reverting"),$scope.doc.slug=sanitized_slug)}});var timeout=null;$scope.$watch("doc.content.content",function(){initContent?$timeout(function(){initContent=!1}):(timeout&&$timeout.cancel(timeout),timeout=$timeout(function(){$scope.saveContent()},5e3))})})},$scope.getShortUrl=function(){var opngv={username:"madison-robot",password:"MeV3MJJE",api:"http://opngv.us/yourls-api.php"},slug=$scope.doc.slug,long_url=$location.protocol()+"://"+$location.host()+"/docs/"+slug;$http({url:opngv.api,method:"JSONP",params:{callback:"JSON_CALLBACK",action:"shorturl",format:"jsonp",url:long_url,username:opngv.username,password:opngv.password}}).success(function(data){$scope.short_url=data.shorturl}).error(function(data){console.error(data),growl.error("There was an error generating your short url.")})},$scope.setSelectOptions=function(){$scope.categoryOptions={placeholder:"Add document categories",multiple:!0,simple_tags:!0,tokenSeparators:[","],tags:function(){return $scope.suggestedCategories},results:function(){return $scope.categories},initSelection:function(element,callback){var returned=[];angular.forEach($scope.categories,function(category,index){returned.push(angular.copy({id:index,text:category}))}),callback(returned)}},$scope.statusOptions={placeholder:"Select Document Status",ajax:{url:"/api/docs/statuses",dataType:"json",data:function(){},results:function(data){var returned=[];return angular.forEach(data,function(status){returned.push({id:status.id,text:status.label})}),{results:returned}}},data:function(){return $scope.suggestedStatuses},results:function(){return $scope.status},createSearchChoice:function(term){return{id:term,text:term}},initSelection:function(element,callback){callback($scope.status)},allowClear:!0},$scope.sponsorOptions={placeholder:"Select Document Sponsor",allowClear:!0,ajax:{url:"/api/user/sponsors/all",dataType:"json",data:function(){},results:function(data){var returned=[];return data.success?(angular.forEach(data.sponsors,function(sponsor){var text="";switch(sponsor.sponsorType){case"group":text="[Group] "+sponsor.name;break;case"user":text=sponsor.fname+" "+sponsor.lname+" - "+sponsor.email}returned.push({id:sponsor.id,type:sponsor.sponsorType,text:text})}),{results:returned}):void alert(data.message)}},initSelection:function(element,callback){callback($scope.sponsor)}}},$scope.statusChange=function(status){$scope.status=status},$scope.sponsorChange=function(sponsor){$scope.sponsor=sponsor},$scope.categoriesChange=function(categories){$scope.categories=categories},$scope.getDoc=function(id){return $http.get("/api/docs/"+id).success(function(data){$scope.doc=data,angular.forEach(data.categories,function(category){$scope.categories.push(angular.copy(category.name))})})},$scope.saveTitle=function(){return $http.post("/api/docs/"+$scope.doc.id+"/title",{title:$scope.doc.title}).success(function(data){console.log("Title saved successfully: %o",data)}).error(function(data){console.error("Error saving title for document:",data)})},$scope.saveSlug=function(){return $http.post("/api/docs/"+$scope.doc.id+"/slug",{slug:$scope.doc.slug}).success(function(data){console.log("Slug sent: %o",data)}).error(function(data){console.error("Error saving slug for document:",data)})},$scope.saveContent=function(){return $http.post("/api/docs/"+$scope.doc.id+"/content",{content:$scope.doc.content.content}).success(function(data){console.log("Content saved successfully: %o",data)}).error(function(data){console.error("Error saving content for document:",data)})},$scope.createDate=function(newDate){""!==$scope.newdate.label&&($scope.newdate.date=$filter("date")(newDate,"short"),$http.post("/api/docs/"+$scope.doc.id+"/dates",{date:$scope.newdate}).success(function(data){data.date=Date.parse(data.date),data.$changed=!1,$scope.dates.push(data),$scope.newdate={label:"",date:new Date}}).error(function(data){console.error("Unable to save date: %o",data)}))},$scope.deleteDate=function(date){$http["delete"]("/api/docs/"+$scope.doc.id+"/dates/"+date.id).success(function(){var index=$scope.dates.indexOf(date);$scope.dates.splice(index,1)}).error(function(){console.error("Unable to delete date: %o",date)})},$scope.saveDate=function(date){var sendDate=angular.copy(date);return sendDate.date=$filter("date")(sendDate.date,"short"),$http.put("/api/dates/"+date.id,{date:sendDate}).success(function(data){date.$changed=!1,console.log("Date saved successfully: %o",data)}).error(function(data){console.error("Unable to save date: %o (%o)",date,data)})},$scope.getDocDates=function(){return $http.get("/api/docs/"+$scope.doc.id+"/dates").success(function(data){angular.forEach(data,function(date,index){date.date=Date.parse(date.date),date.$changed=!1,$scope.dates.push(angular.copy(date)),$scope.$watch("dates["+index+"]",function(newitem,olditem){angular.equals(newitem,olditem)||void 0===newitem||(newitem.$changed=!0)},!0)})}).error(function(data){console.error("Error getting dates: %o",data)})},$scope.getVerifiedUsers=function(){return $http.get("/api/user/verify").success(function(data){angular.forEach(data,function(verified){$scope.verifiedUsers.push(angular.copy(verified.user))})}).error(function(data){console.error("Unable to get verified users: %o",data)})},$scope.getDocCategories=function(){return $http.get("/api/docs/"+$scope.doc.id+"/categories").success(function(data){angular.forEach(data,function(category){$scope.categories.push(category.name)})}).error(function(data){console.error("Unable to get categories for document %o: %o",$scope.doc,data)})},$scope.getIntroText=function(){return $http.get("/api/docs/"+$scope.doc.id+"/introtext").success(function(data){$scope.introtext=data.meta_value}).error(function(data){console.error("Unable to get Intro Text for document %o: %o",$scope.doc,data)})},$scope.getDocSponsor=function(){return $http.get("/api/docs/"+$scope.doc.id+"/sponsor").success(function(data){if(void 0===data.sponsorType)return void($scope.sponsor=null);var text="";switch(data.sponsorType.toLowerCase()){case"group":text="[Group] "+data.name;break;case"user":text=data.fname+" "+data.lname+" - "+data.email}$scope.sponsor={id:data.id,type:data.sponsorType.toLowerCase(),text:text}}).error(function(data){console.error("Error getting document sponsor: %o",data)})},$scope.getDocStatus=function(){return $http.get("/api/docs/"+$scope.doc.id+"/status").success(function(data){$scope.status=void 0===data.id?null:{id:data.id,text:data.label}}).error(function(data){console.error("Error getting document status: %o",data)})},$scope.getAllStatuses=function(){$http.get("/api/docs/statuses").success(function(data){angular.forEach(data,function(status){$scope.suggestedStatuses.push(status.label)})}).error(function(data){console.error("Unable to get document statuses: %o",data)})},$scope.getAllCategories=function(){return $http.get("/api/docs/categories").success(function(data){angular.forEach(data,function(category){$scope.suggestedCategories.push(category.name)})}).error(function(data){console.error("Unable to get document categories: %o",data)})},$scope.saveStatus=function(){return $http.post("/api/docs/"+$scope.doc.id+"/status",{status:$scope.status}).success(function(data){console.log("Status saved successfully: %o",data)}).error(function(data){console.error("Error saving status: %o",data)})},$scope.saveSponsor=function(){return $http.post("/api/docs/"+$scope.doc.id+"/sponsor",{sponsor:$scope.sponsor}).success(function(data){console.log("Sponsor saved successfully: %o",data)}).error(function(data){console.error("Error saving sponsor: %o",data)})},$scope.saveCategories=function(){return $http.post("/api/docs/"+$scope.doc.id+"/categories",{categories:$scope.categories}).success(function(data){console.log("Categories saved successfully: %o",data)}).error(function(data){console.error("Error saving categories for document %o: %o \n %o",$scope.doc,$scope.categories,data)})},$scope.saveIntroText=function(introtext){return $http.post("/api/docs/"+$scope.doc.id+"/introtext",{"intro-text":introtext}).success(function(data){console.log("Intro Text saved successfully: %o",data)}).error(function(){console.error("Error saving intro text for document %o: %o",$scope.doc,$scope.introtext)})}}]),angular.module("madisonApp.controllers").controller("DashboardSettingsController",["$scope","$http",function($scope,$http){$scope.admins=[],$scope.getAdmins=function(){$http.get("/api/user/admin").success(function(data){$scope.admins=data}).error(function(data){console.error(data)})},$scope.saveAdmin=function(admin){admin.saved=!1,$http.post("/api/user/admin",{admin:admin}).success(function(){admin.saved=!0}).error(function(data){console.error(data)})},$scope.init=function(){$scope.getAdmins()}}]),angular.module("madisonApp.controllers").controller("DashboardVerifyController",["$scope","$http",function($scope,$http){$scope.requests=[],$scope.init=function(){$scope.getRequests()},$scope.getRequests=function(){$http.get("/api/user/verify").success(function(data){$scope.requests=data}).error(function(data){console.error(data)})},$scope.update=function(request,status){$http.post("/api/user/verify",{request:request,status:status}).success(function(){request.meta_value=status}).error(function(data){console.error(data)})}}]),angular.module("madisonApp.controllers").controller("DashboardVerifyGroupController",["$scope","$http",function($scope,$http){$scope.requests=[],$scope.getRequests=function(){$http.get("/api/groups/verify").success(function(data){$scope.requests=data}).error(function(data){console.error(data)})},$scope.update=function(request,status){$http.post("/api/groups/verify",{request:request,status:status}).success(function(){request.status=status}).error(function(data){console.error(data)})},$scope.getRequests()}]),angular.module("madisonApp.controllers").controller("DashboardVerifyUserController",["$scope","$http",function($scope,$http){$scope.requests=[],$scope.getRequests=function(){$http.get("/api/user/independent/verify").success(function(data){$scope.requests=data}).error(function(data){console.error(data)})},$scope.update=function(request,status){$http.post("/api/user/independent/verify",{request:request,status:status}).success(function(){request.meta_value=status,location.reload()}).error(function(data){console.error(data)})},$scope.getRequests()}]),angular.module("madisonApp.controllers").controller("DocumentPageController",["$scope","$cookies","$location","Doc","$sce","$stateParams",function($scope,$cookies,$location,Doc,$sce){console.log($stateparams),$scope.hideIntro=$cookies.hideIntro;var annotationHash=$location.hash().match(/^annsubcomment_([0-9]+)$/);$scope.secondtab=!1,!annotationHash&&$location.hash()&&($scope.secondtab=!0),$scope.hideHowToAnnotate=function(){$cookies.hideIntro=!0,$scope.hideIntro=!0},$scope.doc=Doc.get({id:doc.id},function(){if(void 0!==$scope.doc.introtext[0]){var converter=new Markdown.Converter;$scope.introtext=$sce.trustAsHtml(converter.makeHtml($scope.doc.introtext[0].meta_value))}})}]),angular.module("madisonApp.controllers").controller("DocumentTocController",["$scope",function($scope){$scope.headings=[];var headings=$("#doc_content").find("h1,h2,h3,h4,h5,h6");if(headings.length>0)headings.each(function(i,elm){elm=$(elm),elm.attr("id")||elm.attr("id","heading-"+i),elm.addClass("anchor"),$scope.headings.push({title:elm.text(),tag:elm.prop("tagName"),link:elm.attr("id")})});else{$("#toc-column").remove();var container=$("#content").parent();container.removeClass("col-md-6"),container.addClass("col-md-9")}}]),angular.module("madisonApp.controllers").controller("GroupEditController",["$scope","$state","$stateParams","Group",function($scope,$state,$stateParams,Group){$scope.groupId=$stateParams.groupId,$scope.group=$scope.groupId?Group.get({id:$scope.groupId}):new Group,$scope.saveGroup=function(){$scope.group.$save(function(group,headers){$state.go("group-management"),console.log(group,headers)})}}]),angular.module("madisonApp.controllers").controller("GroupManagementController",["$scope","UserService",function($scope,UserService){$scope.$on("groupsUpdated",function(){$scope.groups=UserService.groups,angular.forEach($scope.groups,function(group){group.canEdit="owner"===group.role||"editor"===group.role})}),UserService.getGroups()}]),angular.module("madisonApp.controllers").controller("HomePageController",["$scope","$filter","Doc",function($scope,$filter,Doc){$scope.docs=[],$scope.categories=[],$scope.sponsors=[],$scope.statuses=[],$scope.dates=[],$scope.dateSort="",$scope.select2="",$scope.docSort="created_at",$scope.reverse=!0,$scope.startStep=0,Doc.query(function(data){$scope.parseDocs(data)}).$promise["catch"](function(data){console.error("Unable to get documents: %o",data)}),$scope.select2Config={multiple:!0,allowClear:!0,placeholder:"Filter documents by category, sponsor, or status"},$scope.dateSortConfig={allowClear:!0,placeholder:"Sort By Date"},$scope.parseDocs=function(docs){angular.forEach(docs,function(doc){$scope.docs.push(doc),$scope.parseDocMeta(doc.categories,"categories"),$scope.parseDocMeta(doc.sponsor,"sponsors"),$scope.parseDocMeta(doc.statuses,"statuses"),angular.forEach(doc.dates,function(date){date.date=Date.parse(date.date)})})},$scope.parseDocMeta=function(collection,name){0!==collection.length&&angular.forEach(collection,function(item){var found=$filter("getById")($scope[name],item.id);if(null===found)switch(name){case"categories":$scope.categories.push(item);break;case"sponsors":$scope.sponsors.push(item);break;case"statuses":$scope.statuses.push(item);break;default:console.error("Unknown meta name: "+name)}})},$scope.docFilter=function(doc){var show=!1;if(void 0!==$scope.select2&&""!==$scope.select2){var cont=!0,select2=$scope.select2.split("_"),type=select2[0],value=parseInt(select2[1],10);switch(type){case"category":angular.forEach(doc.categories,function(category){+category.id===value&&cont&&(show=!0,cont=!1)});break;case"sponsor":angular.forEach(doc.sponsor,function(sponsor){+sponsor.id===value&&cont&&(show=!0,cont=!1)});break;case"status":angular.forEach(doc.statuses,function(status){+status.id===value&&cont&&(show=!0,cont=!1)})}}else show=!0;return show}}]),angular.module("madisonApp.controllers").controller("LoginPageController",["$scope","$state","AuthService","UserService","growl",function($scope,$state,AuthService,UserService,growl){$scope.credentials={email:"",password:"",remember:!1},$scope.login=function(){var login=AuthService.login($scope.credentials);login.success(function(){$scope.credentials={email:"",password:"",remember:!1},UserService.getUser(),$state.go("index"),growl.success("You have been logged in successfully")}).error(function(response){console.error(response),response.messages||growl.error("There was an error logging you in.  Check your console for details.")})}}]),angular.module("madisonApp.controllers").controller("PasswordResetController",["$scope","$http","$state",function($scope,$http,$state){$scope.reset=function(){$http.post("/api/password/remind",{email:$scope.email}).success(function(){$state.go("login")}).error(function(response){console.error(response)})}}]),angular.module("madisonApp.controllers").controller("PasswordResetLandingController",["$scope","$stateParams","$http","$state","growl",function($scope,$stateParams,$http,$state,growl){$scope.token=$stateParams.token,$scope.savePassword=function(){return $scope.password!==$scope.password_confirmation?void growl.error("The passwords do not match."):void $http.post("/api/password/reset",{email:$scope.email,password:$scope.password,password_confirmation:$scope.password_confirmation,token:$scope.token}).success(function(){$state.go("login")}).error(function(response){console.error(response)})}}]),angular.module("madisonApp.controllers").controller("ReaderController",["$scope","$http","annotationService","createLoginPopup","$timeout","$anchorScroll",function($scope,$http,annotationService,createLoginPopup,$timeout,$anchorScroll){$scope.annotations=[],$scope.$on("annotationsUpdated",function(){$scope.annotations=annotationService.annotations,$scope.$apply(),$timeout(function(){$anchorScroll()},0)}),$scope.init=function(){$scope.user=user,$scope.doc=doc,$scope.setSponsor(),$scope.getSupported()},$scope.setSponsor=function(){try{0!==$scope.doc.group_sponsor.length?$scope.doc.sponsor=$scope.doc.group_sponsor:($scope.doc.sponsor=$scope.doc.user_sponsor,$scope.doc.sponsor[0].display_name=$scope.doc.sponsor[0].fname+" "+$scope.doc.sponsor[0].lname)}catch(err){console.error(err)}},$scope.getSupported=function(){""!==$scope.user.id&&$http.get("/api/users/"+$scope.user.id+"/support/"+$scope.doc.id).success(function(data){switch(data.support){case"1":$scope.supported=!0;break;case"":$scope.opposed=!0;break;default:$scope.supported=null,$scope.opposed=null}null!==$scope.supported&&null!==$scope.opposed&&($("#doc-support").text(data.supports+" Support"),$("#doc-oppose").text(data.opposes+" Oppose"))}).error(function(){console.error("Unable to get support info for user %o and doc %o",$scope.user,$scope.doc)})},$scope.support=function(supported,$event){""===$scope.user.id?createLoginPopup($event):$http.post("/api/docs/"+$scope.doc.id+"/support",{support:supported}).success(function(data){null===data.support?($scope.supported=!1,$scope.opposed=!1):($scope.supported=data.support,$scope.opposed=!data.support);var button=$($event.target),otherButton=$($event.target).siblings("a.btn");button.hasClass("doc-support")?(button.text(data.supports+" Support"),otherButton.text(data.opposes+" Oppose")):(button.text(data.opposes+" Oppose"),otherButton.text(data.supports+" Support"))}).error(function(data){console.error("Error posting support: %o",data)})}}]),angular.module("madisonApp.controllers").controller("ResendConfirmationController",["$scope","$http","$state","$stateParams",function($scope,$http,$state,$stateParams){$stateParams.token&&$http.post("/api/user/verify-email",{token:$stateParams.token}).success(function(){$state.go("index")}).error(function(response){$state.go("login"),console.error(response)}),$scope.resendConfirmation=function(){$http.post("/api/verification/resend",{email:$scope.email,password:$scope.password}).success(function(){$state.go("login")}).error(function(response){console.error(response)})}}]),angular.module("madisonApp.controllers").controller("SignupPageController",["$scope","$state","AuthService","UserService","growl",function($scope,$state,AuthService,UserService,growl){$scope.signup=function(){var signup=AuthService.signup($scope.credentials);signup.success(function(){$scope.credentials={fname:"",lname:"",email:"",password:""},UserService.getUser(),$state.go("index"),growl.success("Welcome to Madison!  We just sent you an email.  Please click on the activation link to log in.")}).error(function(response){console.error(response),response.messages||growl.error("There was an error signing you up.  Check your console for details.")})}}]),angular.module("madisonApp.controllers").controller("UserEditPageController",["$scope","UserService",function($scope,UserService){$scope.user=UserService.user,$scope.$on("userUpdated",function(){$scope.user=UserService.user,$scope.isUserVerified()}),$scope.isUserVerified=function(){$scope.user.user_meta?angular.forEach($scope.user.user_meta,function(meta){"verify"===meta.meta_key&&($scope.user.verified=meta.meta_value)}):$scope.user.verified=!1}}]),angular.module("madisonApp.controllers").controller("UserNotificationsController",["$scope","$http","UserService",function($scope,$http,UserService){UserService.exists.then(function(){$http.get("/api/user/"+$scope.user.id+"/notifications").success(function(data){$scope.notifications=data}).error(function(data){console.error("Error loading notifications: %o",data)})}),$scope.$watch("notifications",function(newValue,oldValue){void 0!==oldValue&&$http.put("/api/user/"+$scope.user.id+"/notifications",{notifications:newValue}).error(function(data){console.error("Error updating notification settings: %o",data)})},!0)}]),angular.module("madisonApp.controllers").controller("UserPageController",["$scope","$http","$location",function($scope,$http,$location){$scope.user={},$scope.meta="",$scope.docs=[],$scope.activities=[],$scope.verified=!1,$scope.getUser=function(){var abs=$location.absUrl(),id=abs.match(/.*\/(\d+)$/);id=id[1],$http.get("/api/user/"+id).success(function(data){$scope.user=angular.copy(data),$scope.meta=angular.copy(data.user_meta),angular.forEach(data.docs,function(doc){$scope.docs.push(doc)}),angular.forEach(data.comments,function(comment){comment.label="comment",$scope.activities.push(comment)
}),angular.forEach(data.annotations,function(annotation){annotation.label="annotation",$scope.activities.push(annotation)}),angular.forEach($scope.user.user_meta,function(meta){var cont=!0;"verify"===meta.meta_key&&"verified"===meta.meta_value&&cont&&($scope.verified=!0,cont=!1)})}).error(function(data){console.error("Unable to retrieve user: %o",data)})},$scope.showVerified=function(){return $scope.user.docs&&$scope.user.docs.length>0?!0:!1},$scope.activityOrder=function(activity){return Date.parse(activity.created_at)},$scope.getUser()}]),angular.module("madisonApp.directives",[]),angular.module("madisonApp.directives").directive("accountDropdown",["UserService","AuthService","$location","growl",function(UserService,AuthService,$location,growl){return{scope:!0,link:function(scope){scope.$watch(function(){return UserService.user},function(newVal){scope.user=newVal}),scope.logout=function(){var logout=AuthService.logout();logout.then(function(){growl.success("You have been successfully logged out."),UserService.getUser(),$location.path("/")})}},templateUrl:"/templates/partials/account-dropdown.html"}}]),angular.module("madisonApp.directives").directive("activitySubComment",["growl","$anchorScroll","$timeout",function(growl,$anchorScroll,$timeout){return{restrict:"A",transclude:!0,templateUrl:"/templates/activity-sub-comment.html",compile:function(){return{post:function(scope,element,attrs){var commentLink=element.find(".subcomment-link").first(),linkPath=window.location.origin+window.location.pathname+"#annsubcomment_"+attrs.subCommentId;$(commentLink).attr("data-clipboard-text",linkPath);var client=new ZeroClipboard(commentLink);client.on("aftercopy",function(){scope.$apply(function(){growl.success("Link copied to clipboard.")})}),$timeout(function(){$anchorScroll()},0)}}}}}]),angular.module("madisonApp.directives").directive("adminBreadcrumb",["$location",function($location){return{restrict:"A",templateUrl:"/templates/directives/admin-breadcrumb.html",link:function(scope){function camelCase(match,group1,group2){return" "+group2.toUpperCase()}scope.crumbs=[];var crumb,label,current,crumbs=$location.$$path.substring(1).split("/"),link="",i=0;for(i=0;i<crumbs.length-1;i++)crumb=crumbs[i],link+="/"+crumb,label=crumb.toLowerCase().replace(/(^|-)(.)/g,camelCase),crumb={link:link,label:label},scope.crumbs.push(crumb);current=crumbs.pop(),label=current.toLowerCase().replace(/(^|-)(.)/g,camelCase),crumb={label:label},scope.crumbs.push(crumb)}}}]),angular.module("madisonApp.directives").directive("annotationItem",["growl",function(growl){return{restrict:"A",transclude:!0,templateUrl:"/templates/annotation-item.html",compile:function(){return{post:function(scope,element,attrs){var commentLink=element.find(".comment-link").first(),linkPath=window.location.origin+window.location.pathname+"#"+attrs.activityItemLink;$(commentLink).attr("data-clipboard-text",linkPath);var client=new ZeroClipboard(commentLink);client.on("aftercopy",function(){scope.$apply(function(){growl.success("Link copied to clipboard.")})})}}}}}]),angular.module("madisonApp.directives").directive("commentItem",["growl",function(growl){return{restrict:"A",transclude:!0,templateUrl:"/templates/comment-item.html",compile:function(){return{post:function(scope,element,attrs){var commentLink=element.find(".comment-link").first(),linkPath=window.location.origin+window.location.pathname+"#"+attrs.activityItemLink;$(commentLink).attr("data-clipboard-text",linkPath);var client=new ZeroClipboard(commentLink);client.on("aftercopy",function(){scope.$apply(function(){growl.success("Link copied to clipboard.")})})}}}}}]),angular.module("madisonApp.directives").directive("docComments",function(){return{restrict:"AECM",templateUrl:"/templates/doc-comments.html"}}),angular.module("madisonApp.directives").directive("docLink",function($http,$compile){function link(scope,elem,attrs){$http.get("/api/docs/"+attrs.docId).success(function(data){var html='<a href="/docs/'+data.slug+'">'+data.title+"</a>",e=$compile(html)(scope);elem.replaceWith(e)}).error(function(data){console.error("Unable to retrieve document %o: %o",attrs.docId,data)})}return{restrict:"AECM",link:link}}),angular.module("madisonApp.directives").directive("docListItem",function(){return{restrict:"A",templateUrl:"/templates/doc-list-item.html"}}),angular.module("madisonApp.directives").directive("ngBlur",function(){return function(scope,elem,attrs){elem.bind("blur",function(){scope.$apply(attrs.ngBlur)})}}),angular.module("madisonApp.directives").directive("profileCompletionMessage",["$http",function($http){return{restrict:"A",templateUrl:"/templates/profile-completion-message.html",link:function(scope){scope.updateEmail=function(newEmail,newPassword){$http.put("/api/user/"+scope.user.id+"/edit/email",{email:newEmail,password:newPassword}).success(function(){scope.user.email=newEmail}).error(function(data){console.error("Error updating user email: %o",data)})}}}}]),angular.module("madisonApp.directives").directive("socialLogin",[function(){return{restrict:"A",scope:{message:"@message"},templateUrl:"/templates/social-login.html"}}]),angular.module("madisonApp.directives").directive("stateSelect",[function(){return{restrict:"A",templateUrl:"/templates/partials/state-select.html",scope:!0,link:function($scope){$scope.emptyName="Select State"},controller:["$scope",function($scope){$scope.states=[{name:"Alabama",abbreviation:"AL"},{name:"Alaska",abbreviation:"AK"},{name:"Arizona",abbreviation:"AZ"},{name:"Arkansas",abbreviation:"AR"},{name:"California",abbreviation:"CA"},{name:"Colorado",abbreviation:"CO"},{name:"Connecticut",abbreviation:"CT"},{name:"Delaware",abbreviation:"DE"},{name:"District Of Columbia",abbreviation:"DC"},{name:"Florida",abbreviation:"FL"},{name:"Georgia",abbreviation:"GA"},{name:"Hawaii",abbreviation:"HI"},{name:"Idaho",abbreviation:"ID"},{name:"Illinois",abbreviation:"IL"},{name:"Indiana",abbreviation:"IN"},{name:"Iowa",abbreviation:"IA"},{name:"Kansas",abbreviation:"KS"},{name:"Kentucky",abbreviation:"KY"},{name:"Louisiana",abbreviation:"LA"},{name:"Maine",abbreviation:"ME"},{name:"Maryland",abbreviation:"MD"},{name:"Massachusetts",abbreviation:"MA"},{name:"Michigan",abbreviation:"MI"},{name:"Minnesota",abbreviation:"MN"},{name:"Mississippi",abbreviation:"MS"},{name:"Missouri",abbreviation:"MO"},{name:"Montana",abbreviation:"MT"},{name:"Nebraska",abbreviation:"NE"},{name:"Nevada",abbreviation:"NV"},{name:"New Hampshire",abbreviation:"NH"},{name:"New Jersey",abbreviation:"NJ"},{name:"New Mexico",abbreviation:"NM"},{name:"New York",abbreviation:"NY"},{name:"North Carolina",abbreviation:"NC"},{name:"North Dakota",abbreviation:"ND"},{name:"Ohio",abbreviation:"OH"},{name:"Oklahoma",abbreviation:"OK"},{name:"Oregon",abbreviation:"OR"},{name:"Pennsylvania",abbreviation:"PA"},{name:"Rhode Island",abbreviation:"RI"},{name:"South Carolina",abbreviation:"SC"},{name:"South Dakota",abbreviation:"SD"},{name:"Tennessee",abbreviation:"TN"},{name:"Texas",abbreviation:"TX"},{name:"Utah",abbreviation:"UT"},{name:"Vermont",abbreviation:"VT"},{name:"Virginia",abbreviation:"VA"},{name:"Washington",abbreviation:"WA"},{name:"West Virginia",abbreviation:"WV"},{name:"Wisconsin",abbreviation:"WI"},{name:"Wyoming",abbreviation:"WY"}]}]}}]),angular.module("madisonApp.directives").directive("subcommentLink",["growl","$anchorScroll","$timeout",function(growl,$anchorScroll,$timeout){return{restrict:"A",template:'<span class="glyphicon glyphicon-link" title="Copy link to clipboard"></span>',compile:function(){return{post:function(scope,element,attrs){var commentLink=element,linkPath=window.location.origin+window.location.pathname+"#subcomment_"+attrs.subCommentId;$(commentLink).attr("data-clipboard-text",linkPath);var client=new ZeroClipboard(commentLink);client.on("aftercopy",function(){scope.$apply(function(){growl.success("Link copied to clipboard.")})}),$timeout(function(){$anchorScroll()},0)}}}}}]),angular.module("madisonApp.directives").directive("updateTitle",["$rootScope","$timeout",function($rootScope,$timeout){return{link:function(scope,element){var listener=function(event,toState){var title="Madison";toState.data&&toState.data.title&&(title=toState.data.title),$timeout(function(){element.text(title)},0,!1)};$rootScope.$on("$stateChangeSuccess",listener)}}}]),angular.module("madisonApp.filters",[]),angular.module("madisonApp.filters").filter("getById",function(){return function(input,id){var i=0,len=input.length;for(i;len>i;i++)if(+input[i].id===+id)return input[i];return null}}),angular.module("madisonApp.filters").filter("gravatar",function(){return function(email){var hash="";return void 0!==email&&(hash=CryptoJS.MD5(email.toLowerCase())),hash.toString(CryptoJS.enc.Hex)}}),angular.module("madisonApp.filters").filter("parseDate",function(){return function(date){return Date.parse(date)}}),angular.module("madisonApp.filters").filter("toArray",function(){return function(obj){return obj instanceof Object?_.map(obj,function(val,key){return val.$key=key,val}):obj}}),angular.module("madisonApp.resources",[]).factory("Doc",function($resource){return $resource("/api/docs/:id")}).factory("Group",function($resource){return $resource("/api/groups/:id")}),angular.module("madisonApp.services",[]),angular.module("madisonApp.services").factory("annotationService",function($rootScope,$sce){var annotationService={},converter=new Markdown.Converter;return annotationService.annotations=[],annotationService.setAnnotations=function(annotations){angular.forEach(annotations,function(annotation){annotation.html=$sce.trustAsHtml(converter.makeHtml(annotation.text)),this.annotations.push(annotation)},this),this.broadcastUpdate()},annotationService.addAnnotation=function(annotation){if(void 0===annotation.id)var interval=window.setInterval(function(){this.addAnnotation(annotation),window.clearInterval(interval)}.bind(this),500);else annotation.html=$sce.trustAsHtml(converter.makeHtml(annotation.text)),this.annotations.push(annotation),this.broadcastUpdate()},annotationService.broadcastUpdate=function(){$rootScope.$broadcast("annotationsUpdated")},annotationService}),angular.module("madisonApp.services").factory("AuthService",["$http","$sanitize",function($http,$sanitize){return{login:function(credentials){var login=$http.post("/api/user/login",credentials);return login},logout:function(){var logout=$http.get("/api/user/logout");return logout},signup:function(credentials){var signup=$http.post("/api/user/signup",credentials);return signup}}}]),angular.module("madisonApp.services").factory("createLoginPopup",["$document","$timeout",function($document,$timeout){var body=$document.find("body"),html=$document.find("html"),attach_handlers=function(){html.on("click.popup",function(){$(".popup").remove(),html.off("click.popup")})},ajaxify_form=function(inForm,callback){var form=$(inForm);form.submit(function(e){e.preventDefault(),$.post(form.attr("action"),form.serialize(),function(response){if(response.errors&&Object.keys(response.errors).length){var error_html=$("<ul></ul>");$(response.errors).each(function(i,key){error_html.append("<li>"+response.errors[key][0]+"</li>")}),form.find(".errors").html(error_html)}else callback(response)})})};return function(event){console.log(event);var popup=$('<div class="popup unauthed-popup"><p>Please log in.</p><input type="button" id="login" value="Login" class="btn btn-primary"/><input type="button" id="signup" value="Sign up" class="btn btn-primary" /></div>');popup.on("click.popup",function(event){event.stopPropagation()}),$("#login",popup).click(function(event){event.stopPropagation(),event.preventDefault(),$.get("/api/user/login/",{},function(data){data=$(data),ajaxify_form(data.find("form"),function(){$("html").trigger("click.popup"),location.reload(!1)}),popup.html(data)})}),$("#signup",popup).click(function(event){event.stopPropagation(),event.preventDefault(),$.get("/api/user/signup/",{},function(data){data=$(data),ajaxify_form(data.find("form"),function(result){$("html").trigger("click.popup"),alert(result.message)}),popup.html(data)})}),body.append(popup);var position={top:event.clientY-popup.height(),left:event.clientX};popup.css(position).css("position","absolute"),popup.css("z-index","999"),$timeout(function(){attach_handlers()},50)}}]),angular.module("madisonApp.services").service("modalService",["$modal",function($modal){var modalDefaults={backdrop:!0,keyboard:!0,modalFade:!0,templateUrl:"/templates/modal.html"},modalOptions={closeButtonText:"Close",actionButtonText:!1,headerText:"Notice",bodyText:"Hmm... someone forgot the content here..."};this.showModal=function(customModalDefaults,customModalOptions){return customModalDefaults||(customModalDefaults={}),customModalDefaults.backdrop=!0,this.show(customModalDefaults,customModalOptions)},this.show=function(customModalDefaults,customModalOptions){var tempModalDefaults={},tempModalOptions={};return angular.extend(tempModalDefaults,modalDefaults,customModalDefaults),angular.extend(tempModalOptions,modalOptions,customModalOptions),tempModalDefaults.controller||(tempModalDefaults.controller=function($scope,$modalInstance){$scope.modalOptions=tempModalOptions,$scope.modalOptions.ok=function(result){$modalInstance.close(result)},$scope.modalOptions.close=function(){$modalInstance.dismiss("cancel")}}),$modal.open(tempModalDefaults).result}}]),angular.module("madisonApp.services").factory("UserService",["$rootScope","$http",function($rootScope,$http){var UserService={};return UserService.user={},UserService.getUser=function(){UserService.exists=$http.get("/api/user/current").success(function(data){UserService.user=data.user,$rootScope.$broadcast("userUpdated")}).error(function(data){console.error(data)})},UserService.getGroups=function(){UserService.exists.then(function(){$http.get("/api/user/"+UserService.user.id+"/groups").success(function(data){UserService.groups=data,$rootScope.$broadcast("groupsUpdated")}).error(function(data){console.error(data)})})},UserService}]),window.jQuery=window.$;var imports=["madisonApp.filters","madisonApp.services","madisonApp.resources","madisonApp.directives","madisonApp.controllers","ui","ui.router","ngAnimate","ngSanitize","angular-growl","ngResource","angular-tour","ipCookie"];try{var app=angular.module("madisonApp",imports)}catch(err){console.log(err)}var xhReq=new XMLHttpRequest;xhReq.open("GET","/auth/token",!1),xhReq.send(null),app.constant("CSRF_TOKEN",xhReq.responseText),history.pushState||window.location.hash&&window.location.replace("/"!==window.location.pathname?"/#"+window.location.hash.substr(1):"/#"+window.location.pathname);try{app.config(["growlProvider","$httpProvider","$stateProvider","$urlRouterProvider",function(growlProvider,$httpProvider,$stateProvider,$urlRouterProvider){growlProvider.messagesKey("messages"),growlProvider.messageTextKey("text"),growlProvider.messageSeverityKey("severity"),growlProvider.onlyUniqueMessages(!0),growlProvider.globalTimeToLive(3e3),$httpProvider.interceptors.push(growlProvider.serverMessagesInterceptor),$urlRouterProvider.otherwise("404"),$stateProvider.state("index",{url:"/",controller:"HomePageController",templateUrl:"/templates/pages/home.html",data:{title:"Madison Home"}}).state("login",{url:"/user/login",controller:"LoginPageController",templateUrl:"/templates/pages/login.html",data:{title:"Login to Madison"}}).state("signup",{url:"/user/signup",controller:"SignupPageController",templateUrl:"/templates/pages/signup.html",data:{title:"Signup for Madison"}}).state("password-reset-request",{url:"/password/reset",controller:"PasswordResetController",templateUrl:"/templates/pages/password-reset-request.html",data:{title:"Password Reset"}}).state("password-reset-landing",{url:"/password/reset/:token",controller:"PasswordResetLandingController",templateUrl:"/templates/pages/password-reset-landing.html",data:{title:"Change Password"}}).state("resend-confirmation",{url:"/verification/resend",controller:"ResendConfirmationController",templateUrl:"/templates/pages/resend-confirmation.html",data:{title:"Resend Confirmation Email"}}).state("resend-confirmation-landing",{url:"/user/verify/:token",controller:"ResendConfirmationController",data:{title:"Verifying Email"}}).state("faq",{url:"/faq",templateUrl:"/templates/pages/faq.html",data:{title:"Frequently Asked Questions"}}).state("about",{url:"/about",templateUrl:"/templates/pages/about.html",data:{title:"About Madison"}}).state("privacy-policy",{url:"/privacy-policy",templateUrl:"/templates/pages/privacy-policy.html",data:{title:"Privacy Policy"}}).state("copyright",{url:"/copyright",templateUrl:"/templates/pages/copyright.html",data:{title:"Copyright Policy"}}).state("terms-and-conditions",{url:"/terms-and-conditions",templateUrl:"/templates/pages/terms-and-conditions.html",data:{title:"Terms and Conditions"}}).state("user-notification-settings",{url:"/user/edit/:user/notifications",controller:"UserNotificationsController",templateUrl:"/templates/pages/user-notification-settings.html",data:{title:"Notification Settings"}}).state("group-management",{url:"/groups",controller:"GroupManagementController",templateUrl:"/templates/pages/group-management.html",data:{title:"Group Management"}}).state("create-group",{url:"/groups/edit",controller:"GroupEditController",templateUrl:"/templates/pages/group-edit.html",data:{title:"Create Group"}}).state("edit-group",{url:"/groups/edit/:groupId",controller:"GroupEditController",templateUrl:"/templates/pages/group-edit.html",data:{title:"Edit Group"}}).state("administrative-dashboard",{url:"/administrative-dashboard",templateUrl:"/templates/pages/administrative-dashboard.html",data:{title:"Administrative Dashboard"}}).state("verify-account",{url:"/administrative-dashboard/verify-account",templateUrl:"/templates/pages/verify-account.html",controller:"DashboardVerifyController",data:{title:"Verify Account"}}).state("verify-group",{url:"/administrative-dashboard/verify-group",templateUrl:"/templates/pages/verify-group.html",controller:"DashboardVerifyGroupController",data:{title:"Verify Group"}}).state("verify-independent",{url:"/administrative-dashboard/verify-independent",templateUrl:"/templates/pages/verify-independent.html",controller:"DashboardVerifyUserController",data:{title:"Verify Independent Sponsor"}}).state("user",{url:"/user/:id",templateUrl:"/templates/pages/user.html",controller:"UserPageController",data:{title:"User Profile"}}).state("user-edit",{url:"/user/edit/:id",templateUrl:"/templates/pages/user-edit.html",controller:"UserEditPageController",data:{title:"Edit User Profile"}}).state("404",{url:"/404",templateUrl:"/templates/pages/404.html",data:{title:"Uh oh."}})}])}catch(err){console.error(err)}app.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),window.console=window.console||{},window.console.log=window.console.log||function(){};